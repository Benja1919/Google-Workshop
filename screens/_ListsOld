const addItemToList = (listId) => {
    if (newItemText.trim() === '') {
      alert('Please enter a valid item name');
      return;
    }
    const updatedLists = lists.map(list => {
      if (list.id === listId) {
        const updatedItems = [...list.items, { id: newItemID, name: newItemText }];
        const updatedList = { ...list, items: updatedItems };
        if (selectedList && selectedList.id === listId) {
          setSelectedList(updatedList);
        }
        // Update the list in Firebase
        firestoreDB().updateListInFirebase(listId, updatedItems);
        return updatedList;
      }
      return list;
    });
    setNewItemText('');
  };

  const startEditItem = (itemId, itemName) => {
    setEditItemId(itemId);
    setEditItemText(itemName);
  };

  const saveEditItem = () => {
    const updatedLists = lists.map(list => {
      const updatedItems = list.items.map(item =>
        item.id === editItemId ? { ...item, name: editItemText } : item
      );
      if (list.id === selectedList.id) {
        // Update the list in Firebase
        firestoreDB().updateListInFirebase(list.id, updatedItems);
      }
      return { ...list, items: updatedItems };
    });
    setLists(updatedLists);
    setEditItemId(null);
    setEditItemText('');
  };

  const cancelEditItem = () => {
    setEditItemId(null);
    setEditItemText('');
  };

  const deleteItem = (listId, itemId) => {
    const updatedLists = lists.map(list => {
      const updatedItems = list.items.filter(item => item.id !== itemId);
      if (list.id === listId) {
        // Update the list in Firebase
        firestoreDB().updateListInFirebase(listId, updatedItems);
      }
      return list.id === listId ? { ...list, items: updatedItems } : list;
    });
    setLists(updatedLists);
  };

  const openList = (list) => {
    setSelectedList(list);
    setModalVisible(true);
  };

  const closeList = () => {
    setSelectedList(null);
    setModalVisible(false);
  };

  const navigateToRestaurant = (restaurantID) => {
    navigation.navigate('Restaurant', { restaurantName:null, restaurantID: restaurantID });
  };

  const renderDefaultButtons = () => (
    <View style={styles.buttonsContainer}>
      {lists.map((list, index) => (
        <TouchableOpacity
          key={list.id}
          style={[styles.categoryButtonIcon, {
            left: 165 + 140 * Math.cos((index * 2 * Math.PI) / lists.length),
            bottom: 340 + 140 * Math.sin((index * 2 * Math.PI) / lists.length),
          }]}
          onPress={() => openList(list)}
        >
          <Image source={list.Image} style={{ width: 30, height: 30 }} />
        </TouchableOpacity>
      ))}
      {currentUser && user.userName.toLowerCase() === currentUser.userName.toLowerCase() && ( //only curr user can add lists to his own page
        <TouchableOpacity
          style={[styles.categoryButtonIcon, {
            right: 20,
            top: -30,
          }]}
          onPress={() => setCreateListModalVisible(true)}
        >
          <Image source={require('../assets/icons/pluslists.png')} style={styles.categoryButtonIcon} />
        </TouchableOpacity>
      )}
    </View>
  );
  

  const renderItemList = (se) => (
    <FlatList
      data={selectedList?.items || []}
      keyExtractor={(item) => item.id}
      scrollEnabled={se}
      renderItem={({ item }) => (
        <EditableListItem
          item={item}
          onSave={saveEditItem}
          onCancel={cancelEditItem}
          onStartEdit={() => startEditItem(item.id, item.name)}
          onDelete={() => deleteItem(selectedList.id, item.id)}
          isEditing={editItemId === item.id}
          editItemText={editItemText}
          setEditItemText={setEditItemText}
          navigateToRestaurant={navigateToRestaurant}
          
        />
      )}
    />
  );
  const ReceiveRestaurantData= ({ id, name }) => {
    if(id != null && name != null){
      setNewItemID(id);
      setNewItemText(name);
    }
  };
const EditableListItem = ({ item, onSave, onCancel, onStartEdit, onDelete, isEditing, editItemText, setEditItemText, navigateToRestaurant }) => {
    if (isEditing) {
      return (
        <View style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 5 }}>
          <TextInput
            style={{ flex: 1, height: 40, borderColor: 'gray', borderWidth: 1, padding: 5 }}
            value={editItemText}
            onChangeText={text => setEditItemText(text)}
          />
          <TouchableOpacity
            style={{ backgroundColor: 'green', padding: 5, marginLeft: 10, borderRadius: 5 }}
            onPress={onSave}
          >
            <Text style={{ color: 'white' }}>Save</Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={{ backgroundColor: 'red', padding: 5, marginLeft: 10, borderRadius: 5 }}
            onPress={onCancel}
          >
            <Text style={{ color: 'white' }}>Cancel</Text>
          </TouchableOpacity>
        </View>
      );
    } else {
    //  console.log(currentUser.userName);
   //   console.log(selectedList.userName);
   if(currentUser){
       if (currentUser.userName === user.userName){
      return (
        <TouchableOpacity
          style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 5 }}
          onPress={() => navigateToRestaurant(item.id)}
        >
          <Text style={{ flex: 1, marginLeft: 10 }}>{item.name}</Text>
         
          <TouchableOpacity
            style={{ backgroundColor: 'red', padding: 5, marginLeft: 10, borderRadius: 5 }}
            onPress={onDelete}
          >
            <Text style={{ color: 'white' }}>Delete</Text>
          </TouchableOpacity>
        </TouchableOpacity>
      );
    }
  }
    else { //other user viewing elses lists
      return (
      <TouchableOpacity
      style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 5 }}
      onPress={() => navigateToRestaurant(item.id)}
    >
      <Text style={{ flex: 1, marginLeft: 10 }}>{item.name}</Text>
      </TouchableOpacity>
      );
    } 

    }
  };

  const createNewList = async (icon) => { // Create a new List, store it in the DB
    if (newListName.trim() === '') {
      alert('Please enter a valid list name');
      return;
    }
    const newList = {
      id: Math.random().toString(),
      userName: currentUser.userName,
      listName: newListName,
      listDescription: listDescription,
      rank: rank,
      restCount: restCount,
      savedCount: savedCount,
      listPic: listPic,
      items: [],
      Image: icon,
      profileImageUrl: currentUser.profileImageUrl,
      createTime: Timestamp.now()
    };

    await firestoreDB().CreateList(newList);
    setNewListName('');
    setCreateListModalVisible(false);
  };
return (
    <View style={styles.container}>
      <Image source={{ uri: profileImageUrl }} style={styles.profileImage} />
      {renderDefaultButtons()}

      <Modal  //List Window
        animationType="slide"
        transparent={true}
        visible={modalVisible}
        onRequestClose={closeList}
      >
        
        <View style={styles.modalContainer}>
        
          <View style={styles.modalContent}>
          <ScrollView>
            <Text style={styles.listTitle}>{selectedList?.name}</Text>
            {renderItemList(false)}
            
            <RestaurantFinder textinputstyle={styles.input} placeholder={"Search Restaurant"} Complete={ReceiveRestaurantData}
              
            />
            
            <TouchableOpacity
              style={styles.addButton}
              onPress={() => addItemToList(selectedList.id)}
            >
              <Text style={styles.addButtonText}>Add Restaurant</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.closeButton}
              onPress={closeList}
            >
              <Text style={styles.closeButtonText}>Close</Text>
            </TouchableOpacity>
            </ScrollView>
          </View>
          
        </View>
        
      </Modal>

      <Modal  //Create New List window
        animationType="slide" 
        transparent={true}
        visible={createListModalVisible}
        onRequestClose={() => setCreateListModalVisible(false)}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Text style={styles.listTitle}>Create New List</Text>
            <TextInput
              style={styles.input}
              placeholder="Enter new list name"
              value={newListName}
              onChangeText={text => setNewListName(text)}
            />
            <TextInput
              style={styles.input}
              placeholder="Enter description"
              value={listDescription}
              onChangeText={text => setNewlistDescription(text)}
            />
            {/* Display icons for selection */}
            <View style={styles.iconSelectionContainer}>
              {iconData.map((icon, index) => (
                <TouchableOpacity
                  key={index}
                  style={styles.iconOption}
                  onPress={() => setSelectedIcon(icon)}
                >
                  <Image source={icon} style={{ width: 30, height: 30 }} />
                </TouchableOpacity>
              ))}
            </View>
            <TouchableOpacity
              style={styles.createButton}
              onPress={() => createNewList(selectedIcon)} // Pass selectedIcon to createNewList function
            >
              <Text style={styles.createButtonText}>Create New List</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.cancelButton}
              onPress={() => setCreateListModalVisible(false)}
            >
              <Text style={styles.cancelButtonText}>Cancel</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    </View>
  );
}
  }
  else{ //someone's viewing other lists
    return (
      <View style={styles.container}>
        <Image source={{ uri: profileImageUrl }} style={styles.profileImage} />
        {renderDefaultButtons()}
  
        <Modal  //List Window
          animationType="slide"
          transparent={true}
          visible={modalVisible}
          onRequestClose={closeList}
        >
          <View style={styles.modalContainer}>
            <View style={styles.modalContent}>
              <Text style={styles.listTitle}>{selectedList?.name}</Text>
              {renderItemList(true)}

              <TouchableOpacity
                style={styles.closeButton}
                onPress={closeList}
              >
                <Text style={styles.closeButtonText}>Close</Text>
              </TouchableOpacity>
            </View>
          </View>
        </Modal>
  
        <Modal  //Create New List window
          animationType="slide" 
          transparent={true}
          visible={createListModalVisible}
          onRequestClose={() => setCreateListModalVisible(false)}
        >
          <View style={styles.modalContainer}>
            <View style={styles.modalContent}>
              <Text style={styles.listTitle}>Create New List</Text>
              <TextInput
                style={styles.input}
                placeholder="Enter new list name"
                value={newListName}
                onChangeText={text => setNewListName(text)}
              />
              <TextInput
                style={styles.input}
                placeholder="Enter description"
                value={listDescription}
                onChangeText={text => setNewlistDescription(text)}
              />
              {/* Display icons for selection */}
              <View style={styles.iconSelectionContainer}>
                {iconData.map((icon, index) => (
                  <TouchableOpacity
                    key={index}
                    style={styles.iconOption}
                    onPress={() => setSelectedIcon(icon)}
                  >
                    <Image source={icon} style={{ width: 30, height: 30 }} />
                  </TouchableOpacity>
                ))}
              </View>
              <TouchableOpacity
                style={styles.createButton}
                onPress={() => createNewList(selectedIcon)} // Pass selectedIcon to createNewList function
              >
                <Text style={styles.createButtonText}>Create New List</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={styles.cancelButton}
                onPress={() => setCreateListModalVisible(false)}
              >
                <Text style={styles.cancelButtonText}>Cancel</Text>
              </TouchableOpacity>
            </View>
          </View>
        </Modal>
      </View>
  );